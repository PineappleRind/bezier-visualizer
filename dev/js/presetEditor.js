var psc=$("presetSelectChoice"),presetEditorPages=[`<div><h1>Preset list</h1>${getPresetListHTML()}<button onclick="addPreset()">Add Preset...</button></div>`];function presetEditorPage(e){if(document.querySelector(".modal"))return removeModal(),void setTimeout(function(){showModal(e)},500);showModal(e)}function showModal(e){let t=document.createElement("DIV");t.classList.add("modal"),t.setAttribute("aria-modal","true"),t.innerHTML='<p id="close" onclick="removeModal()">&times;</p>'+presetEditorPages[e];let s=$("modalOverlay");s.appendChild(t),s.classList.add("showing"),setTimeout(function(){t.classList.add("showing")}),onkeydown=(e=>{"Escape"==e.key&&removeModal()})}function removeModal(){document.querySelector(".modal").classList.remove("showing"),document.querySelector("#modalOverlay").classList.remove("showing"),setTimeout(()=>{document.querySelector(".modal").remove()},500),onkeydown=(()=>{})}function getPresetListHTML(){let e='<div id="presetChoice">\n       ';for(let t=0;t<saveData.presets.length;t++)e+=`\t<div class="preset"><h1>${saveData.presets[t].name}</h1><button onclick="removePreset(${t});toast('Preset ${saveData.presets[t].name} successfully deleted','success');this.parentElement.remove()">Delete</button><button onclick="editPresetData(${t})">Edit Data</button><button onclick="changePresetName(${t});">Rename</button></div>\n           `;return e+="\n       </div>"}function getPresetSelectHTML(){let e='<select id="presetChoice">\n       ';for(let t=0;t<saveData.presets.length;t++)selected="",saveData.presets[t].data==saveData.data&&(selected="selected"),e+=`<option value="${t}" ${selected}>${saveData.presets[t].name}</option>\n           `;return e+="\n       </select>"}function removePreset(e){saveData.presets.splice(e,1),updatePresetPage(),psc.innerHTML=getPresetSelectHTML()}function updatePresetPage(){presetEditorPages=[`\n     <p id="close" onclick="removeModal()">&times;</p><div><h1>Preset list</h1>${getPresetListHTML()}</div>\n `]}function changePresetName(e){let t=prompt("New preset name:");saveData.presets[e].name=t,$("presetChoice").remove(),document.querySelector(".modal").innerHTML+=getPresetListHTML(),updatePresetPage(),psc.innerHTML=getPresetSelectHTML()}function editPresetData(e){presetEditorPages[1]=`<p id="close" onclick="removeModal()">&times;</p><div><h1>Editing data for ${saveData.presets[e].name}</h1><textarea style="width:200px; height:300px">${JSON.stringify(saveData.presets[e].data).replace(/\]\,/g,"],&#13;&#10;").replace(/\[\[/g,"[&#13;&#10;[").replace(/\]\]/g,"]&#13;&#10;]")}</textarea><button onclick="savePresetData(${e},this.previousElementSibling)">Save</button>`,presetEditorPage(1),psc.innerHTML=getPresetSelectHTML()}function savePresetData(e,t){saveData.presets[e].data=JSON.parse(t.value.replace("&#13;&#10;","")),toast("Successfully edited preset "+saveData.presets[e].name,"success")}function addPreset(){presetEditorPages[2]='<p id="close" onclick="removeModal()">&times;</p>\n       <div>\n       <button onclick="presetEditorPage(0)">Back</button>\n       <h1>New preset</h1>\n       <p>Name:</p>\n       <input type="text" id="presetName" placeholder="Name"><br>\n       <p>Data:</p>\n       <textarea  id="presetData" style="width:300px; height:200px">[\n       [0, 0],\n       [0, 0]\n   ]</textarea><br>\n         <p>View options:</p>\n         <div id="presetViewOptions">\n             <input type="checkbox" value="lines" id="plines" checked><label for="plines">Show lines</label><br>\n             <input type="checkbox" value="midpoints"id="pmidpoints" checked><label for="pmidpoints">Show midpoints</label><br>\n             <input type="checkbox" value="trail" id="ptrail" checked><label for="ptrail">Show trail</label><br>\n             <input type="checkbox" value="controlpoints" id="pcontrolpoints" checked><label for="pcontrolpoints">Show control points</label><br>\n             <input type="checkbox" value="finalmidpoint" id="pfinalmidpoint" checked><label for="pfinalmidpoint">Show final midpoints</label><br>\n         </div><br>\n       <p style="width:400px">Each point\'s x & y coordinates is wrapped in brackets []. Example: [100, 130]. This will make a point at x 100 and y 130.</p>\n       <br>\n       <button onclick="parseAndAddPreset($(\'presetName\'),$(\'presetData\'),$(\'presetViewOptions\'))">Create preset</button>',presetEditorPage(2)}function parseAndAddPreset(e,t,s){let a=saveData.presets.length;saveData.presets[a]={},saveData.presets[a].name=e.value,saveData.presets[a].show={lines:null,midpoints:null,trail:null,controlpoints:null,finalmidpoint:null};try{var n=JSON.parse(t.value)}catch(e){return void toast('Invalid data structure <br><small style="font-weight:200">'+error+"</small>","error")}if(!(n.length<2)){for(let e=0;e<n.length;e++)2!=n[e].length&&toast("Point "+(e+1)+" does not have proper coordinates.","error");for(let e=0;e<s.children.length;e++)s.children[e].checked?saveData.presets[a].show[s.children[e].value]=!0:saveData.presets[a].show[s.children[e].value]=!1;return saveData.presets[a].data=JSON.parse(t.value),psc.innerHTML=getPresetSelectHTML(),toast("Added preset "+e.value+" successfully","success"),save.set(),presetEditorPage(0)}toast("Please add more than 1 point","error")}function loadPreset(e){let t,s=saveData.presets[e];saveData.data=s.data,t=null===s.show?{lines:!0,midpoints:!0,trail:!0,controlpoints:!0,finalmidpoint:!0}:s.show,saveData.settings.show=t,replay(),save.set(),updateCheckboxes()}psc.oninput=(()=>{loadPreset(parseInt(psc.value)),save.set()}),$("presetSelectChoice").innerHTML=getPresetSelectHTML();